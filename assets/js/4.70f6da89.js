(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{246:function(e,t,a){e.exports=a.p+"assets/img/1160f15dd7b077815c012db111bd5789ec15343b.798cb282.png"},247:function(e,t,a){e.exports=a.p+"assets/img/c99a7230062e4406a0cbee93f2e3e04f82f4091e.ad6e593d.png"},248:function(e,t,a){e.exports=a.p+"assets/img/1286676953-5b98dd6f947ad_articlex.264f4205.jpeg"},268:function(e,t,a){"use strict";a.r(t);var s=a(28),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"aone-flow-工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aone-flow-工作流"}},[e._v("#")]),e._v(" Aone flow 工作流")]),e._v(" "),s("h2",{attrs:{id:"概况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概况"}},[e._v("#")]),e._v(" 概况")]),e._v(" "),s("p",[e._v("阿里的AoneFlow，它基本上兼顾了 TrunkBased 的“易于持续集成”和 GitFlow 的“易于管理需求”特点，同时规避掉 GitFlow 的那些繁文缛节。\nAoneFlow 只使用三种分支类型：master分支、feature分支、release分支，以及三条基本规则。")]),e._v(" "),s("h2",{attrs:{id:"规则一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则一"}},[e._v("#")]),e._v(" 规则一")]),e._v(" "),s("p",[e._v("开始工作前，从主干创建特性分支。\n每当开始一件新的工作项（比如新的功能或是待解决的问题）的时候，从代表最新已发布版本的主干上创建一个通常以feature/前缀命名的特性分支，\n然后在这个分支上提交代码修改。也就是说，每个工作项（可以是一个人完成，或是多个人协作完成）对应一个特性分支，所有的修改都不允许直接提交到主干。\n"),s("img",{attrs:{src:a(246),alt:"The Feathers chat application"}})]),e._v(" "),s("h2",{attrs:{id:"规则二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则二"}},[e._v("#")]),e._v(" 规则二")]),e._v(" "),s("p",[e._v("通过合并特性分支，形成发布分支\nAoneFlow 的思路是，从主干上拉出一条新分支，将所有本次要集成或发布的特性分支依次合并过去，从而得到发布分支。发布分支通常以release/前缀命名。\n"),s("img",{attrs:{src:a(247),alt:"The Feathers chat application"}})]),e._v(" "),s("h2",{attrs:{id:"规则三"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则三"}},[e._v("#")]),e._v(" 规则三")]),e._v(" "),s("p",[e._v("发布到线上正式环境后，合并相应的release分支到master分支，在master分支上添加tag，同时删除该release分支关联的feature分支。\n"),s("img",{attrs:{src:a(248),alt:"The Feathers chat application"}}),e._v("\n为了避免在代码仓库里堆积大量历史上的feature分支，还应该清理掉已经上线部分feature分支。如果要回溯历史版本，只需在master分支上找到相应的版本的tag即可。\n除了基本规则，还有一些实际操作中不成文的技巧。比如上线后的Hotfix，正常的处理方法应该是，创建一条新的release分支，对应线上环境（相当于Hotfix分支）\n，同时为这个分支创建临时流水线，以保障必要的发布前检查和冒烟测试能够自动执行。")]),e._v(" "),s("p",[e._v("其实还有一种简便方法是，将线上正式环境对应的release分支上关联的feature分支全部清退掉，在这个release分支上直接进行修改，改完利用现成的流水线自动发布。")])])}),[],!1,null,null,null);t.default=r.exports}}]);