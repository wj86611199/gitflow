(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{256:function(t,r,s){t.exports=s.p+"assets/img/git-workflows-forking.ba2bd4a2.png"},273:function(t,r,s){"use strict";s.r(r);var a=s(28),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"forking-工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forking-工作流"}},[t._v("#")]),t._v(" forking 工作流")]),t._v(" "),a("p",[t._v("Forking 工作流和前面讨论的几种工作流有根本的不同。这种工作流不是使用单个服务端仓库作为『中央』代码基线，\n而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有 2 个 Git 仓库而不是 1 个：一个本地私有的，另一个服务端公开的。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(256),alt:"The Feathers chat application"}})]),t._v(" "),a("p",[t._v("Forking 工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能 push 代码到仅有的中央仓库中。开发者 push 到自己的服务端仓库，\n而只有项目维护者才能 push 到正式仓库。这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。")]),t._v(" "),a("p",[t._v("效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。也让这个工作流成为开源项目的理想工作流。")]),t._v(" "),a("h2",{attrs:{id:"工作方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作方式"}},[t._v("#")]),t._v(" 工作方式")]),t._v(" "),a("p",[t._v("和其它的 Git 工作流一样，Forking 工作流要先有一个公开的正式仓库存储在服务器上。但一个新的开发者想要在项目上工作时，不是直接从正式仓库克隆，\n而是 fork 正式项目在服务器上创建一个拷贝。")]),t._v(" "),a("p",[t._v("这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许 push 到这个仓库，但可以 pull 到修改（后面我们很快就会看这点很重要）。在创建了自己服务端拷贝之后，\n和之前的工作流一样，开发者执行 git clone 命令克隆仓库到本地机器上，作为私有的开发环境。")]),t._v(" "),a("p",[t._v("要提交本地修改时，push 提交到自己公开仓库中 —— 而不是正式仓库中。然后，给正式仓库发起一个 pull request，让项目维护者知道有更新已经准备好可以集成了。\n对于贡献的代码，pull request 也可以很方便地作为一个讨论的地方。")]),t._v(" "),a("p",[t._v("为了集成功能到正式代码库，维护者 pull 贡献者的变更到自己的本地仓库中，检查变更以确保不会让项目出错，合并变更到自己本地的 master 分支，然后 push master\n分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行 pull 操作与正式仓库同步自己本地仓库。")]),t._v(" "),a("h2",{attrs:{id:"正式仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正式仓库"}},[t._v("#")]),t._v(" 正式仓库")]),t._v(" "),a("p",[t._v("在 Forking 工作流中，『官方』仓库的叫法只是一个约定，理解这点很重要。从技术上来看，各个开发者仓库和正式仓库在Git看来没有任何区别。\n事实上，让正式仓库之所以正式的唯一原因是它是项目维护者的公开仓库。")]),t._v(" "),a("h2",{attrs:{id:"forking-工作流的分支使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forking-工作流的分支使用方式"}},[t._v("#")]),t._v(" Forking 工作流的分支使用方式")]),t._v(" "),a("p",[t._v("所有的个人公开仓库实际上只是为了方便和其它的开发者共享分支。各个开发者应该用分支隔离各个功能，就像在功能分支工作流和 GitFlow 工作流一样。\n唯一的区别是这些分支被共享了。在 Forking 工作流中这些分支会被 pull 到另一个开发者的本地仓库中，而在功能分支工作流和 GitFlow 工作流中是直接被 push 到正式仓库中。")])])}),[],!1,null,null,null);r.default=n.exports}}]);